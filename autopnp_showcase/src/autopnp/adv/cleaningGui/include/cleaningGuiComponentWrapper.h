/*
 * Copyright (c) 2011-2013, fortiss GmbH.
 * Licensed under the Apache License, Version 2.0.
 *
 * Use, modification and distribution are subject to the terms specified
 * in the accompanying license file LICENSE.txt located at the root directory
 * of this software distribution. A copy is available at
 * http://chromosome.fortiss.org/.
 *
 * This file is part of CHROMOSOME.
 *
 * $Id$
 */

/**
 * \file
 *         Component wrapper - implements interface of a component
 *              to the data handler
 *
 * \author
 *         This file has been generated by the CHROMOSOME Modeling Tool (XMT)
 *         (fortiss GmbH).
 */

#ifndef AUTOPNP_ADV_CLEANINGGUI_CLEANINGGUICOMPONENTWRAPPER_H
#define AUTOPNP_ADV_CLEANINGGUI_CLEANINGGUICOMPONENTWRAPPER_H

/******************************************************************************/
/***   Includes                                                             ***/
/******************************************************************************/
#include "xme/core/executionManager/include/executionManagerDataStructures.h"

// PROTECTED REGION ID(AUTOPNP_ADV_CLEANINGGUI_CLEANINGGUICOMPONENTWRAPPER_H_INCLUDES) ENABLED START

#include "autopnp/topic/dictionaryData.h"

// PROTECTED REGION END

/******************************************************************************/
/***   Type definitions                                                     ***/
/******************************************************************************/
/**
 * \enum   Defines internal port ids of component 'cleaningGui'.
 *         These can be used when calling the autopnp_adv_cleaningGui_cleaningGuiComponentWrapper_receivePort function.
 *
 * \see    autopnp_adv_cleaningGui_cleaningGuiComponentWrapper_receivePort
 */
typedef enum
{
	AUTOPNP_ADV_CLEANINGGUI_CLEANINGGUICOMPONENTWRAPPER_PORT_IMAGEIN = 0 ///< Port 'imageIn'
}
autopnp_adv_cleaningGui_cleaningGuiComponentWrapper_interalPortId_t;

/******************************************************************************/
/***   Prototypes                                                           ***/
/******************************************************************************/
/**
 * \brief  This function is called by the function wrapper after the step
 *         function has been called. It signals to the middleware that all
 *         input ports have been read.
 */
void
autopnp_adv_cleaningGui_cleaningGuiComponentWrapper_completeReadOperations(void);

/**
 * \brief  Associate an internal port number with the corresponding port handle.
 *         For the ids of the individual ports, see the definition of autopnp_adv_cleaningGui_cleaningGuiComponentWrapper_interalPortId_t.
 *
 * \param  portId Port handle from the dataHandler.
 * \param  componentInternalPortId Component internal port number of the above port.
 * 
 * \retval XME_STATUS_SUCCESS if no problems occurred.
 * \retval XME_STATUS_INVALID_PARAMETER if componentInternalPortId is unknown.
 */
xme_status_t
autopnp_adv_cleaningGui_cleaningGuiComponentWrapper_receivePort
(
	xme_core_dataManager_dataPacketId_t portId,
	autopnp_adv_cleaningGui_cleaningGuiComponentWrapper_interalPortId_t componentInternalPortId
);

/**
 * \brief  Read data from port imageIn.
 *
 * \param  data User provided storage, to which the data is copied.
 *
 * \retval XME_STATUS_SUCCESS if operation was successful.
 * \retval XME_STATUS_INTERNAL_ERROR
 * \retval XME_STATUS_INVALID_PARAMETER
 */
xme_status_t
autopnp_adv_cleaningGui_cleaningGuiComponentWrapper_readPortImageIn
(
	autopnp_topic_image_t* data
);


#endif // #ifndef AUTOPNP_ADV_CLEANINGGUI_CLEANINGGUICOMPONENTWRAPPER_H
